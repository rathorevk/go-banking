package database

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rathorevk/GoBanking/app/database/sqlc"
)

type DB struct {
	Pool    *pgxpool.Pool
	Queries *sqlc.Queries
}

var DBClient *DB

func RunMigrations() error {
	m, err := migrate.New(
		"file://./app/database/migrations",
		os.Getenv("DATABASE_URL"),
	)
	if err != nil {
		return fmt.Errorf("failed to initialize migrations: %v", err)
	}

	if err := m.Up(); err != nil && err != migrate.ErrNoChange {
		return fmt.Errorf("failed to apply migrations: %v", err)
	}

	log.Println("Migrations applied successfully!")
	return nil
}

func getDB(url string) (*pgxpool.Pool, error) {
	config, err := pgxpool.ParseConfig(url)
	if err != nil {
		return nil, err
	}

	// Configure connection pool for concurrency
	config.MaxConns = 10 // Max concurrent DB connections
	config.MinConns = 1  // Keep minimum connections alive
	config.MaxConnLifetime = time.Hour
	config.MaxConnIdleTime = time.Minute * 30

	pool, err := pgxpool.NewWithConfig(context.Background(), config)
	if err != nil {
		return nil, fmt.Errorf("unable to create connection pool: %v", err)
	}

	return pool, pool.Ping(context.Background())
}

func Init() (*DB, error) {
	pool, err := getDB(os.Getenv("DATABASE_URL"))
	if err != nil {
		return nil, fmt.Errorf("failed to create connection pool: %w", err)
	}

	log.Println("Successfully created connection pool!")

	// this is generated by sqlc cli
	queries := sqlc.New(pool)

	currentDB, _ := queries.GetCurrentDatabase(context.Background())

	log.Println("Successfully created query objects for database:", currentDB)

	// Assign to global variable
	DBClient = &DB{
		Pool:    pool,
		Queries: queries,
	}

	return DBClient, nil
}
