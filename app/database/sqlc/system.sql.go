// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: system.sql

package sqlc

import (
	"context"
	"net/netip"
)

const getConnectionInfo = `-- name: GetConnectionInfo :one
SELECT 
    current_database() as database_name,
    current_user as username,
    inet_client_addr() as client_address,
    inet_client_port() as client_port
`

type GetConnectionInfoRow struct {
	DatabaseName  string      `json:"database_name"`
	Username      interface{} `json:"username"`
	ClientAddress netip.Addr  `json:"client_address"`
	ClientPort    int32       `json:"client_port"`
}

func (q *Queries) GetConnectionInfo(ctx context.Context) (GetConnectionInfoRow, error) {
	row := q.db.QueryRow(ctx, getConnectionInfo)
	var i GetConnectionInfoRow
	err := row.Scan(
		&i.DatabaseName,
		&i.Username,
		&i.ClientAddress,
		&i.ClientPort,
	)
	return i, err
}

const getCurrentDatabase = `-- name: GetCurrentDatabase :one
SELECT current_database() as database_name
`

func (q *Queries) GetCurrentDatabase(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getCurrentDatabase)
	var database_name string
	err := row.Scan(&database_name)
	return database_name, err
}

const getDatabaseVersion = `-- name: GetDatabaseVersion :one
SELECT version() as version
`

func (q *Queries) GetDatabaseVersion(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getDatabaseVersion)
	var version string
	err := row.Scan(&version)
	return version, err
}
